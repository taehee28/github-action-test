name: Android CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    # - name: Build with Gradle
    #   run: ./gradlew assembleDebug --stacktrace

    - name: Decode Keystore
      env: 
        ENCODED_STRING: ${{ secrets.KEYSTORE_BASE_64 }}
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEYSTORE_ALIAS: ${{ secrets.KEYSTORE_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      run: |
        echo $ENCODED_STRING > keystore-b64.txt
        base64 -d keystore-b64.txt > keystore.jks

    - name: Build signed debug apk
      env: 
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEYSTORE_ALIAS: ${{ secrets.KEYSTORE_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      run: ./gradlew assembleDebug --stacktrace

    - name: Get signed debug apk file path
      id: debugApk
      run: echo "apkfile=$(find app/build/outputs/apk/debug/*.apk)" >> $GITHUB_OUTPUT

    - name: slack upload file
      uses: MeilCli/slack-upload-file@v4.0.0
      with:
        slack_token: ${{ secrets.SLACK_TOKEN }}
        channel_id: ${{ secrets.SLACK_CHANNEL_APK_DELIVERY }}
        # File contents via a POST variable. If omitting this parameter, you must provide a file.
        content: 'content'
        # File contents via multipart/form-data. If omitting this parameter, you must submit content.
        file_path: '${{ steps.debugApk.outputs.apkfile }}'
        # file_type: 'apk'
        # file not founding options: warn, error or ignore. alike actions/upload-artifact
        if_no_files_found: error
        initial_comment: 'TEST!!'
        # max API retry count. default retries is 3
        # retries: # optional
    

    # - name: Slack File Upload
    #   # You may pin to the exact commit or the version.
    #   # uses: adrey/slack-file-upload-action@903be3678c88966c762193f06530c39178b44d68
    #   uses: adrey/slack-file-upload-action@1.0.5
    #   with:
    #     # Path to file
    #     path: find app/build/outputs/apk/debug -name '*.apk'
    #     # Slack token
    #     token: ${{ secrets.SLACK_TOKEN }}
    #     # Slack channels
    #     channel: ${{ secrets.SLACK_CHANNEL_APK_DELIVERY }}
    #     # Filename of file
    #     # filename: # optional
    #     # A file type identifier.
    #     # filetype: "apk"
    #     # The message text introducing the file in specified channels.
    #     initial_comment: create APK ${{ job.status }}!
    #     # Title of file
    #     # title: # optional
          
    # - name: slack-send
    #   id: slack
    #   # You may pin to the exact commit or the version.
    #   # uses: slackapi/slack-github-action@6c661ce58804a1a20f6dc5fbee7f0381b469e001
    #   uses: slackapi/slack-github-action@v1.25.0
    #   with:
    #     # Slack channel ID where message will be posted. Needed if using bot token
    #     channel-id: ${{ secrets.SLACK_CHANNEL_APK_DELIVERY }}
    #     # Message to post into Slack. Needed if using bot token
    #     slack-message: "TEST! ${{ job.status }}"
    #     # JSON payload to send to Slack if webhook route. If not supplied, json from GitHub event will be sent instead
    #     #payload: # optional
    #     # path to JSON payload to send to Slack if webhook route. If not supplied, json from GitHub event will be sent instead. If payload is provided, it will take preference over this field
    #     #payload-file-path: # optional
    #     # The timestamp of a previous message posted. It will update the existing message instead of posting a new message
    #     #update-ts: # optional
    #   env:
    #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    #     SLACK_BOT_TOKEN: ${{ secrets.SLACK_TOKEN }}

    # - name: send apk to slack
    #   run: curl https://slack.com/api/files.upload -F token=${{ secrets.SLACK_TOKEN }} -F channels=${{ secrets.SLACK_CHANNEL_APK_DELIVERY }} -F file=@${{ steps.debugApk.outputs.apkfile }}
